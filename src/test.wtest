import pedidos.*
import rodados.*
import dependencia.*
import rodados.*
import rodados.*
import rodados.*
import wollok.game.*

test "el pedido2 no es compatible con el color rojo" {
	const pedido = new Pedido(distanciaARecorrer = 350, tiempoMaximo = 7, cantidadDePasajerosALlevar = 2, conjuntoColoresIncompatibles = #{ azul, negro })
	const pedido2 = new Pedido(distanciaARecorrer = 350, tiempoMaximo = 5, cantidadDePasajerosALlevar = 4, conjuntoColoresIncompatibles = #{ rojo, negro })
	const corsita = new ChevroletCorsa(color = rojo)
	const corsita2 = new ChevroletCorsa(color = negro)
	const deportes = new Dependencia(cantidadEmpleados = 5)
	deportes.agregarAFlota(corsita)
	deportes.agregarAFlota(corsita2)
	deportes.agregarPedido(pedido)
	deportes.agregarPedido(pedido2)
	assert.that(pedido2.colorNoEsCompatible(rojo))
}

test "los pedidos 1 y 2 no pueden ser satisfecho por ningun auto de deportes" {
	const pedido = new Pedido(distanciaARecorrer = 350, tiempoMaximo = 7, cantidadDePasajerosALlevar = 2, conjuntoColoresIncompatibles = #{ azul, negro })
	const pedido2 = new Pedido(distanciaARecorrer = 350, tiempoMaximo = 5, cantidadDePasajerosALlevar = 4, conjuntoColoresIncompatibles = #{ rojo, negro })
	const corsita = new ChevroletCorsa(color = rojo)
	const corsita2 = new ChevroletCorsa(color = negro)
	const deportes = new Dependencia(cantidadEmpleados = 5)
	deportes.agregarAFlota(corsita)
	deportes.agregarAFlota(corsita2)
	deportes.agregarPedido(pedido)
	deportes.agregarPedido(pedido2)
	assert.equals([ pedido, pedido2 ], deportes.pedidosInsatisfechos())
}

test "la dependencia deportes le falta 25 de capacidad" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(25, deportes.capacidadFaltante())
	assert.equals(5, cultura.capacidadFaltante())
}

test"la dependencia cultura le falta 5 de capacidad" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(5, cultura.capacidadFaltante())
}

test "el peso total de la flota deportes es " {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(6450, deportes.pesoTotalFlota())
}

test "el peso de total de la flota cultura es" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(10700, cultura.pesoTotalFlota())
}

test "la flota deportes esta equipada" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.that(deportes.estaBienEquipada())
}

test "la flota cultura esta equipada" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.notThat(cultura.estaBienEquipada())
}

test "la capacidad total en color azul de la flota deporte es de 3 " {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(3, deportes.capacidadTotalEnColor(azul))
}

test "la capacidad total en color azul de la flota cultura es de 10" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.equals(10, cultura.capacidadTotalEnColor(azul))
}

test "la flota deportes es grande" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.that(deportes.esGrande())
}

test "la flota cultura no es grande" {
	const deportes = new Dependencia(cantidadEmpleados = 45)
	const cultura = new Dependencia(cantidadEmpleados = 31)
	const cachito = new ChevroletCorsa(color = rojo)
	const corsita = new ChevroletCorsa(color = azul)
	const corsita2 = new ChevroletCorsa(color = verde)
	const kwind = new RenaultKwid(tanqueAdicional = true)
	const kwind2 = new RenaultKwid(tanqueAdicional = true)
	const kwind3 = new RenaultKwid(tanqueAdicional = false)
	const kwind4 = new RenaultKwid(tanqueAdicional = true)
	const max5 = new AutoEspecial(capacidadPasajero = 5, velocidadMaxima = 160, peso = 1200, color = beige)
	trafic.interiorDeTrafic(interiorPopular)
	trafic.motor(motorBataton)
	deportes.agregarAFlota(cachito)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(corsita2)
	deportes.agregarAFlota(kwind)
	deportes.agregarAFlota(max5)
	cultura.agregarAFlota(cachito)
	cultura.agregarAFlota(kwind2)
	cultura.agregarAFlota(kwind3)
	cultura.agregarAFlota(kwind4)
	cultura.agregarAFlota(trafic)
	assert.notThat(cultura.esGrande())
}

test "cachito paso por la posicion 5,5" {
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(4, 2)
	cachito.position(5, 5)
	cachito.position(2, 7)
	const p = new Position(x = 5, y = 5)
	assert.that(cachito.pasoPor(p))
}

test "cachito paso por la fila 3" {
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(3, 5)
	cachito.position(3, 6)
	cachito.position(3, 7)
	cachito.position(4, 7)
	assert.that(cachito.pasoPorFila(3))
}

test "cachito paso por la fila 4" {
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(3, 5)
	cachito.position(3, 6)
	cachito.position(3, 7)
	cachito.position(4, 7)
	assert.that(cachito.pasoPorFila(4))
}

test "cachito paso por las filas 3, 4 y 5" {
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(3, 7)
	cachito.position(4, 7)
	cachito.position(5, 5)
	assert.that(cachito.recorrioFilas([ 3, 4, 5 ]))
}

test "tira false porq cachito no paso por la fila 4"{
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(3, 7)
	
	cachito.position(5, 5)
	assert.notThat(cachito.recorrioFilas([ 3, 4, 5 ]))
}

test "pasa por todas las filas por mas que pase por otras filas"{
	const cachito = new ChevroletCorsa(color = rojo)
	cachito.position(3, 5)
	cachito.position(3, 6)
	cachito.position(3, 7)
	cachito.position(4, 7)
	cachito.position(5, 5)
	cachito.position(6, 4)
	
	assert.that(cachito.recorrioFilas([ 3, 4, 5 ]))
}

test "cachito puede satisfacer pedido de 960 kms con tiempo máximo de 8 horas y para 4 pasajeros donde los colores incompatibles son azul y negro" {
	const cachito = new ChevroletCorsa(color = rojo)
	const pedido = new Pedido(distanciaARecorrer = 960, tiempoMaximo = 8, cantidadDePasajerosALlevar = 4, conjuntoColoresIncompatibles = #{ azul, negro })
	assert.that(pedido.elAutoPuedeSatisfacerPedido(cachito))
}

test"cachito no puede satisfacer pedido de 960 kms con tiempo máximo de 8 horas y para 4 pasajeros donde los colores incompatibles son rojo y negro" {
	const cachito = new ChevroletCorsa(color = rojo)
	const pedido = new Pedido(distanciaARecorrer = 960, tiempoMaximo = 8, cantidadDePasajerosALlevar = 4, conjuntoColoresIncompatibles = #{ rojo, negro })
	assert.notThat(pedido.elAutoPuedeSatisfacerPedido(cachito))
}

test "cachito no puede satisfacer el pedido de 6 horas" {
	const cachito = new ChevroletCorsa(color = rojo)
	const pedido = new Pedido(distanciaARecorrer = 960, tiempoMaximo = 6, cantidadDePasajerosALlevar = 4, conjuntoColoresIncompatibles = #{ azul, negro })
	assert.notThat(pedido.elAutoPuedeSatisfacerPedido(cachito))
}
